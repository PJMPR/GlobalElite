package dao;

import dao.mappers.IMapResultSetIntoEntity;
import dao.repositories.IMatchHistoryRepository;
import dao.uow.IUnitOfWork;
import domain.model.Maps;
import domain.model.MatchHistory;
import domain.model.MatchScoreBoard;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

/**
 * @author L on 13.11.2016.
 */
public class MatchHistoryRepository extends RepositoryBase<MatchHistory> implements IMatchHistoryRepository {


    private PreparedStatement getScores;

    public MatchHistoryRepository(Connection connection, IMapResultSetIntoEntity<MatchHistory> mapper, IUnitOfWork uow) {
        super(connection, mapper, uow);

        try{
            getScores = connection.prepareStatement(getScoresSql());
        }catch (SQLException e){
            e.printStackTrace();
        }
    }

    protected String getScoresSql(){
        return "SELECT * FROM HISTORY_OF_MATCH where SCOREBOARD_ID=?";
    }


    @Override
    public List<MatchHistory> withScores(MatchScoreBoard matchScoreBoard) {
        return searchByInt(matchScoreBoard.getId(), getScores);
    }




    @Override
    protected String insertSql() {
        return "INSERT INTO HISTORY_OF_MATCH(scoreOfTeam1, scoreOfTeam2, timeOfMatch, TEAM_1_ID," +
                " TEAM_2_ID, MAP_ID, SCOREBOARD_ID) values (?, ?, ?, ?, ?, ?, ?)";
    }

    @Override
    protected String updateSql() {
        return "UPDATE HISTORY_OF_MATCH SET (scoreOfTeam1, scoreOfTeam2, timeOfMatch, TEAM_1_ID, TEAM_2_ID" +
                ", MAP_ID, SCOREBOARD_ID)=(?,?,?,?,?,?,?) where id=?";
    }

    @Override
    protected void setUpdate(MatchHistory matchHistory) throws SQLException {
        update.setInt(1, matchHistory.getScoreOfTeam1());
        update.setInt(2, matchHistory.getScoreOfTeam2());
        update.setDate(3, (Date) matchHistory.getTimeOfMatch());
        update.setInt(4, matchHistory.getTeam1().getId());
        update.setInt(5, matchHistory.getTeam1().getId());
        update.setInt(6, matchHistory.getMapId());
        update.setInt(7, matchHistory.getMatchScoreBoard().getId());
    }

    @Override
    protected void setInsert(MatchHistory matchHistory) throws SQLException {
        insert.setInt(1, matchHistory.getScoreOfTeam1());
        insert.setInt(2, matchHistory.getScoreOfTeam2());
        insert.setDate(3, (Date) matchHistory.getTimeOfMatch());
        insert.setInt(4, matchHistory.getTeam1().getId());
        insert.setInt(5, matchHistory.getTeam2().getId());
        insert.setInt(6, matchHistory.getMapId());
        insert.setInt(7, matchHistory.getMatchScoreBoard().getId());
    }

    @Override
    protected String createTableSql() {
        return "" + "CREATE TABLE HISTORY_OF_MATCH("
                + "id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,"
                + "scoreOfTeam1 int,"
                + "scoreOfTeam2 int,"
                + "timeOfMatch date,"
                + "TEAM_1_ID int,"
                + "TEAM_2_ID int,"
                + "MAP_ID int,"
                + "SCOREBOARD_ID int,"
                + "FOREIGN KEY (TEAM_1_ID) REFERENCES TEAM(id),"
                + "FOREIGN KEY (TEAM_2_ID) REFERENCES TEAM(id),"
                + "FOREIGN KEY (MAP_ID) REFERENCES ENUM_DICTIONARY(id),"
                + "FOREIGN KEY (SCOREBOARD_ID) REFERENCES SCOREBOARD(id)"
                + ")";
    }

    @Override
    protected String tableName() {
        return "HISTORY_OF_MATCH";
    }
}
