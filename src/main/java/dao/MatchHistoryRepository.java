package dao;

import dao.mappers.IMapResultSetIntoEntity;
import dao.repositories.IMatchHistoryRepository;
import dao.uow.IUnitOfWork;
import domain.model.MatchHistory;

import java.sql.*;

/**
 * @author L on 13.11.2016.
 */
public class MatchHistoryRepository extends RepositoryBase<MatchHistory> implements IMatchHistoryRepository {


    private PreparedStatement getLastIdOfTeam1;
    private PreparedStatement getLastIdOfTeam2;
    private PreparedStatement getLastIdOfMap;


    public MatchHistoryRepository(Connection connection, IMapResultSetIntoEntity<MatchHistory> mapper, IUnitOfWork uow) {
        super(connection, mapper, uow);

        try {
            getLastIdOfTeam1 = connection.prepareStatement(getLastIdOfTeam1Sql());
            getLastIdOfTeam2 = connection.prepareStatement(getLastIdOfTeam2Sql());
            getLastIdOfMap = connection.prepareStatement(getLastIdOfMapSql());

        } catch (SQLException e) {
            e.printStackTrace();
        }
    }


    protected String getLastIdOfTeam1Sql() {
        return "UPDATE HISTORY_OF_MATCH SET(TEAM_1_ID) = (SELECT max(id) from TEAM) where id = (SELECT max(id) FROM HISTORY_OF_MATCH)";
    }

    protected String getLastIdOfTeam2Sql() {
        return "UPDATE HISTORY_OF_MATCH SET(TEAM_2_ID) = (SELECT max(id) from TEAM) where id = (SELECT max(id) FROM HISTORY_OF_MATCH)";
    }

    protected String getLastIdOfMapSql() {
        return "UPDATE HISTORY_OF_MATCH SET(MAP_ID) = (SELECT max(id) from MAP) where id = (SELECT max(id) FROM HISTORY_OF_MATCH)";
    }



    @Override
    public void getLastIdForForeignKey() {

        try {
            getLastIdOfTeam1.executeUpdate();
            getLastIdOfTeam2.executeUpdate();
            getLastIdOfMap.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
    @Override
    protected String insertSql() {
        return "INSERT INTO HISTORY_OF_MATCH(scoreOfTeam1, scoreOfTeam2, timeOfMatch) values (?, ?, ?)";
    }

    @Override
    protected String updateSql() {
        return "UPDATE HISTORY_OF_MATCH SET (scoreOfTeam1, scoreOfTeam2, timeOfMatch, TEAM_1_ID, TEAM_2_ID" +
                ", MAP_ID)=(?,?,?,?,?,?) where id=?";
    }

    @Override
    protected void setUpdate(MatchHistory matchHistory) throws SQLException {
        update.setInt(1, matchHistory.getScoreOfTeam1());
        update.setInt(2, matchHistory.getScoreOfTeam2());
        update.setDate(3, (Date) matchHistory.getTimeOfMatch());
        update.setInt(4, matchHistory.getTeam1().getId());
        update.setInt(5, matchHistory.getTeam1().getId());
        update.setInt(6, matchHistory.getGameMap().getId());
    }

    @Override
    protected void setInsert(MatchHistory matchHistory) throws SQLException {
        insert.setInt(1, matchHistory.getScoreOfTeam1());
        insert.setInt(2, matchHistory.getScoreOfTeam2());
        insert.setDate(3, (Date) matchHistory.getTimeOfMatch());

        ResultSet resultSet = insert.getGeneratedKeys();
        if (resultSet.next()) {
            matchHistory.setId((resultSet.getInt(1)));
        }
    }

    @Override
    protected String createTableSql() {
        return "" + "CREATE TABLE HISTORY_OF_MATCH("
                + "id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,"
                + "scoreOfTeam1 int,"
                + "scoreOfTeam2 int,"
                + "timeOfMatch date,"
                + "TEAM_1_ID int,"
                + "TEAM_2_ID int,"
                + "MAP_ID int,"
                + "FOREIGN KEY (TEAM_1_ID) REFERENCES TEAM(id),"
                + "FOREIGN KEY (TEAM_2_ID) REFERENCES TEAM(id),"
                + "FOREIGN KEY (MAP_ID) REFERENCES MAP(id)"
                + ")";
    }

    @Override
    protected String tableName() {
        return "HISTORY_OF_MATCH";
    }
}
