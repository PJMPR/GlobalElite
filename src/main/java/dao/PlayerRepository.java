package dao;

import dao.mappers.IMapResultSetIntoEntity;
import dao.repositories.IPlayerRepository;
import dao.uow.IUnitOfWork;
import domain.model.Player;
import domain.model.Team;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

/**
 * @author L on 13.11.2016.
 */
public class PlayerRepository extends RepositoryBase<Player> implements IPlayerRepository {

    private PreparedStatement getNick;
    private PreparedStatement getCountry;
    private PreparedStatement getDob;
    private PreparedStatement getTeam;
    private PreparedStatement getLastIdOfStats;
    private PreparedStatement getLastIdOfTeam;


    public PlayerRepository(Connection connection, IMapResultSetIntoEntity<Player> mapper, IUnitOfWork uow) {
        super(connection, mapper, uow);

        try {
            getNick = connection.prepareStatement(getNickSql());
            getCountry = connection.prepareStatement(getCountrySql());
            getDob = connection.prepareStatement(getDobSql());
            getTeam = connection.prepareStatement(getTeamSql());
            getLastIdOfStats = connection.prepareStatement(getLastIdOfStatsSql());
            getLastIdOfTeam = connection.prepareStatement(getLastIdOfTeamSql());


        } catch (SQLException e) {
            e.printStackTrace();
        }
    }


    public void getLastId() {

        try {
            getLastIdOfStats.executeUpdate();
            getLastIdOfTeam.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }


    protected String getLastIdOfStatsSql() {
        return "UPDATE PLAYER SET(PLAYER_STATS_ID) = (SELECT max(id) from PLAYER_STATS) where id = (SELECT max(id) FROM PLAYER)";

    }

    protected String getLastIdOfTeamSql() {
        return "UPDATE PLAYER SET(TEAM_ID) = (SELECT max(id) from TEAM) where id = (SELECT max(id) FROM PLAYER)";
    }

    protected String getTeamSql() {
        return "SELECT * FROM PLAYER where TEAM_ID = ?";
    }

    protected String getNickSql() {
        return "SELECT * FROM PLAYER where nick = ?";
    }

    protected String getCountrySql() {
        return "SELECT * FROM PLAYER where country = ?";
    }

    protected String getDobSql() {
        return "SELECT * FROM PLAYER where DoB = ?";
    }


    @Override
    public List<Player> withNick(String nick) {
        return searchByString(nick, getNick);
    }

    @Override
    public List<Player> withCountry(String country) {
        return searchByString(country, getCountry);
    }

    @Override
    public List<Player> withDateOfBirth(java.util.Date dob) {

        List<Player> dateOfBirth = new ArrayList<>();
        try {
            getDob.setDate(1, (Date) dob);
            ResultSet resultSet = getDob.executeQuery();
            while (resultSet.next()) {
                dateOfBirth.add(mapper.map(resultSet));
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return dateOfBirth;
    }

    @Override
    public List<Player> withTeam(Team team) {
        return searchByInt(team.getId(), getTeam);
    }

    @Override
    protected String insertSql() {
        return "INSERT INTO PLAYER(nick, DoB, country, steamId) values (?, ?, ?, ?)";
    }

    @Override
    protected String updateSql() {
        return "UPDATE PLAYER SET (nick,DoB, country, steamId, PLAYER_STATS_ID, TEAM_ID) = (?,?,?,?,?,?) where id=?";
    }

    @Override
    protected void setUpdate(Player player) throws SQLException {
        update.setString(1, player.getNick());
        update.setString(2, player.getCountry());
        update.setDate(3, (Date) player.getDateOfBirth());
        update.setString(4, player.getSteamId());
        update.setInt(5, player.getPlayerStatistics().getId());
        update.setInt(6, player.getTeam().getId());
    }

    @Override
    protected void setInsert(Player player) throws SQLException {

        insert.setString(1, player.getNick());
        insert.setDate(2, (Date) player.getDateOfBirth());
        insert.setString(3, player.getCountry());
        insert.setString(4, player.getSteamId());


        ResultSet resultSet = insert.getGeneratedKeys();
        if (resultSet.next()) {
            player.setId(resultSet.getInt(1));
        }
    }


    @Override
    protected String createTableSql() {
        return "" + "CREATE TABLE PLAYER("
                + "id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,"
                + "nick varchar(25),"
                + "DoB date,"
                + "country varchar(25),"
                + "steamId varchar(25),"
                + "TEAM_ID int,"
                + "PLAYER_STATS_ID int,"
                + "FOREIGN KEY (PLAYER_STATS_ID) REFERENCES PLAYER_STATS(id),"
                + "FOREIGN KEY (TEAM_ID) REFERENCES TEAM(id)"
                + ")";
    }

    @Override
    protected String tableName() {
        return "PLAYER";
    }
}
