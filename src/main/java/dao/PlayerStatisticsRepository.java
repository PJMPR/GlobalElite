package dao;

import dao.mappers.IMapResultSetIntoEntity;
import dao.repositories.IPlayerStatisticsRepository;
import dao.uow.IUnitOfWork;
import domain.model.PlayerStatistics;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

/**
 * @author L on 13.11.2016.
 */

public class PlayerStatisticsRepository extends RepositoryBase<PlayerStatistics> implements IPlayerStatisticsRepository {


    private PreparedStatement getKills;
    private PreparedStatement getDeaths;
    private PreparedStatement getRatio;


    public PlayerStatisticsRepository(Connection connection, IMapResultSetIntoEntity<PlayerStatistics> mapper, IUnitOfWork uow) {
        super(connection, mapper, uow);

        try {
            getKills = connection.prepareStatement(getKillsSql());
            getDeaths = connection.prepareStatement(getDeathsSql());
            getRatio = connection.prepareCall(getRatioSql());
        } catch (SQLException e) {
            e.printStackTrace();
        }

    }


    protected String getKillsSql() {
        return "SELECT * FROM PLAYER_STATS where kills=?";
    }

    protected String getDeathsSql() {
        return "SELECT * FROM PLAYER_STATS where deaths=?";
    }

    protected String getRatioSql() {
        return "SELECT * FROM PLAYER_STATS where ratio=?";
    }


    @Override
    public List<PlayerStatistics> kills(int kills) {
        return searchByInt(kills, getKills);
    }

    @Override
    public List<PlayerStatistics> deaths(int deaths) {
        return searchByInt(deaths, getDeaths);
    }

    @Override
    public List<PlayerStatistics> ratio(double ratio) {
        List<PlayerStatistics> playerRatio = new ArrayList<>();
        try {
            getRatio.setDouble(1, ratio);
            ResultSet resultSet = getKills.executeQuery();
            while (resultSet.next()) {
                playerRatio.add(mapper.map(resultSet));
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return playerRatio;
    }

    @Override
    protected String insertSql() {
        return "INSERT INTO PLAYER_STATS(kills, deaths, ratio) values (?, ?, ?)";
    }

    @Override
    public String updateSql() {
        return "UPDATE PLAYER_STATS SET (kills, deaths, ratio)=(?,?,?) where id=?";
    }

    @Override
    protected void setUpdate(PlayerStatistics playerStatistics) throws SQLException {
        update.setInt(1, playerStatistics.getKills());
        update.setInt(2, playerStatistics.getDeaths());
        update.setDouble(3, playerStatistics.getRatio());
    }

    @Override
    protected void setInsert(PlayerStatistics playerStatistics) throws SQLException {
        insert.setInt(1, playerStatistics.getKills());
        insert.setInt(2, playerStatistics.getDeaths());
        insert.setDouble(3, playerStatistics.getRatio());
    }


    @Override
    protected String createTableSql() {
        return "" + "CREATE TABLE PLAYER_STATS("
                + "id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,"
                + "kills int,"
                + "deaths int,"
                + "ratio double" + ")";
    }

    @Override
    protected String tableName() {
        return "PLAYER_STATS";
    }

}
