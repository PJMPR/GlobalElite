package dao;

import dao.mappers.IMapResultSetIntoEntity;
import dao.repositories.ITeamStatisticsRepository;
import dao.uow.IUnitOfWork;
import domain.model.TeamStatistics;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.List;

/**
 * @author L on 13.11.2016.
 */
public class TeamStatisticsRepository extends RepositoryBase<TeamStatistics> implements ITeamStatisticsRepository {


    private PreparedStatement getWins;
    private PreparedStatement getLooses;
    private PreparedStatement getDraws;

    public TeamStatisticsRepository(Connection connection, IMapResultSetIntoEntity<TeamStatistics> mapper, IUnitOfWork uow) {
        super(connection, mapper, uow);

        try {
            getWins = connection.prepareStatement(getWinsSql());
            getLooses = connection.prepareStatement(getLoosesSql());
            getDraws = connection.prepareStatement(getDrawsSql());
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    protected String getWinsSql() {
        return "SELECT * FROM TEAM_STATS where wins=?";
    }

    protected String getLoosesSql() {
        return "SELECT * FROM TEAM_STATS where looses=?";
    }

    protected String getDrawsSql() {
        return "SELECT * FROM TEAM_STATS where draws=?";
    }

    @Override
    public List<TeamStatistics> withWins(int wins) {
        return searchByInt(wins, getWins);
    }

    @Override
    public List<TeamStatistics> withLooses(int looses) {
        return searchByInt(looses, getLooses);
    }

    @Override
    public List<TeamStatistics> withDraws(int draws) {
        return searchByInt(draws, getDraws);
    }

    @Override
    public List<TeamStatistics> withPoints(double points) {
        return null;
    }

    protected String insertSql() {
        return "INSERT INTO TEAM_STATS(wins, looses, draws, points) values (?, ?, ?, ?)";
    }

    protected String updateSql() {
        return "UPDATE TEAM_STATS SET (wins,looses,draws,points) = (?,?,?,?) where id=?";
    }

    protected void setUpdate(TeamStatistics teamStatistics) throws SQLException {
        update.setInt(1, teamStatistics.getWins());
        update.setInt(2, teamStatistics.getLooses());
        update.setInt(3, teamStatistics.getDraws());
        update.setDouble(4, teamStatistics.getPoints());
    }

    protected void setInsert(TeamStatistics teamStatistics) throws SQLException {
        insert.setInt(1, teamStatistics.getWins());
        insert.setInt(2, teamStatistics.getLooses());
        insert.setInt(3, teamStatistics.getDraws());
        insert.setDouble(4, teamStatistics.getPoints());
    }

    @Override
    protected String createTableSql() {
        return "" + "CREATE TABLE TEAM_STATS("
                + "id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,"
                + "wins int,"
                + "looses int,"
                + "draws int,"
                + "points double" + ")";
    }

    @Override
    protected String tableName() {
        return "TEAM_STATS";
    }
}
